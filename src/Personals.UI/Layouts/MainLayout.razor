@using Personals.UI.Themes
@inherits LayoutComponentBase
@inject ITokenService TokenService
@inject HttpAuthorizationInterceptor HttpInterceptor

<MudThemeProvider Theme="@AppThemes.DefaultTheme" @bind-IsDarkMode="AppThemeService.IsDarkMode" @ref="_themeProvider" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Edge="Edge.Start" OnClick="@(() => _isOpen = !_isOpen)" Icon="@Icons.Material.Filled.Notes"
                           Color="Color.Inherit"/>
        </MudHidden>
        <MudText Typo="Typo.body1">Personals</MudText>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudButton Href="/" Class="ms-2 me-1" Color="Color.Inherit" Variant="Variant.Text">Home</MudButton>
            <AuthorizeView Policy="@Permissions.Users.View">
                <MudButton Href="/users" Class="me-1" Color="Color.Inherit" Variant="Variant.Text">Users</MudButton>
            </AuthorizeView>
            <MudButton Href="/links" Class="me-1" Color="Color.Inherit" Variant="Variant.Text">Links</MudButton>
            <MudButton Href="/code-snippets" Class="me-1" Color="Color.Inherit" Variant="Variant.Text">Code Snippets</MudButton>
            <MudMenu Dense AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                <ActivatorContent>
                    <MudButton Class="mx-1" Color="Color.Inherit" Variant="Variant.Text"
                               EndIcon="@Icons.Material.Filled.KeyboardArrowDown">
                        Lookup Types
                    </MudButton>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Href="/lookup-types/payment-methods">Payment Methods</MudMenuItem>
                    <MudMenuItem Href="/lookup-types/expense-types">Expense Types</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </MudHidden>
        <MudSpacer/>
        <MudMenu Dense AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <ActivatorContent>
                <MudButton Variant="Variant.Text" Color="Color.Inherit">
                    Hello, @(_currentFullName ?? "(Not logged in)")!
                </MudButton>
            </ActivatorContent>
            <ChildContent>
                <MudText Class="mx-4 mb-4 mt-2" Typo="Typo.body1">Signed
                    as: @(_currentUserEmail ?? "(Not logged in)")</MudText>
                <MudDivider/>
                <MudMenuItem Icon="@Icons.Material.Filled.AccountCircle" Href="/account/change-password">
                    Update Password
                </MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="@LogoutAsync">Logout</MudMenuItem>
            </ChildContent>
        </MudMenu>
        <MudTooltip Text="Toggle light/dark theme">
            <MudToggleIconButton @bind-Toggled="@AppThemeService.IsDarkMode"
                                 ToggledIcon="@Icons.Material.Filled.LightMode" Icon="@Icons.Material.Filled.DarkMode"
                                 Color="Color.Inherit"/>
        </MudTooltip>
        <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.Help" Edge="Edge.End"/>
    </MudAppBar>
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudDrawer @bind-Open="_isOpen" Variant="DrawerVariant.Responsive">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6" Color="Color.Primary">Personals</MudText>
            </MudDrawerHeader>
            <MudDrawerContainer>
                <MudNavMenu>
                    <MudNavLink Href="/">Home</MudNavLink>
                    <AuthorizeView Policy="@Permissions.Users.View">
                        <MudNavLink Href="/users">Users</MudNavLink>
                    </AuthorizeView>
                    <MudDivider />
                    <MudText Typo="Typo.body2" Class="pa-3">Utilities</MudText>
                    <MudNavLink Href="/links">Links</MudNavLink>
                    <MudNavLink Href="/code-snippets">Code Snippets</MudNavLink>
                    <MudDivider/>
                    <MudText Typo="Typo.body2" Class="pa-3">Lookup Types</MudText>
                    <MudNavLink Href="/lookup-types/payment-methods">Payment Methods</MudNavLink>
                    <MudNavLink Href="/lookup-types/expense-types">Expense Types</MudNavLink>
                </MudNavMenu>
            </MudDrawerContainer>
        </MudDrawer>
    </MudHidden>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-3">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private string? _currentFullName;
    private string? _currentUserEmail;
    private bool _isOpen;

    private bool _disposed;

    private MudThemeProvider _themeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AppThemeService.IsDarkMode = await _themeProvider.GetSystemPreference();
            await _themeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        HttpInterceptor.RegisterEvents();
        var currentUserClaimsPrincipal = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (currentUserClaimsPrincipal.Identity?.IsAuthenticated ?? false)
        {
            _currentFullName = currentUserClaimsPrincipal.FindFirst(ApplicationClaimTypes.FullName)?.Value;
            _currentUserEmail = currentUserClaimsPrincipal.FindFirst(ApplicationClaimTypes.Email)?.Value;
        }
    }

    private async Task LogoutAsync()
    {
        if (await DialogService.ShowMessageBox("Confirm Logout", "Are you sure want to logout?", yesText: "Log out", cancelText: "Cancel") == true)
        {
            await TokenService.LogoutAsync();
            Snackbar.Add("You have been logged out.", Severity.Success);
            NavigationManager.NavigateTo("/", true);
        }
    }

    private Task OnSystemPreferenceChanged(bool arg)
    {
        AppThemeService.IsDarkMode = arg;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    private void Dispose(bool disposing)
    {
        if (_disposed)
            return;
        if (disposing)
        {
            HttpInterceptor.DisposeEvents();
        }

        _disposed = true;
    }
}