@using Personals.Common.Contracts.Links
@inject ILinkService LinkService

<EditForm Model="@Model" OnSubmit="@SubmitAsync">
    <DataAnnotationsValidator />
    <MudPaper Outlined Class="border-2 mud-border-primary px-3 py-2 mt-3">
        <MudText Typo="Typo.h6" Color="Color.Primary">Update Link</MudText>
        <MudStack>
            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Required @bind-Value="Model.Url" Label="URL" For="@(() => Model.Url)"/>
            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="Model.Title" Label="Title" For="@(() => Model.Title)"/>
            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="Model.Description" Label="Description" For="@(() => Model.Description)" AutoGrow Lines="3" MaxLines="7"/>
            <MudStack Row Justify="Justify.FlexEnd">
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled">Save</MudButton>
                <MudButton OnClick="OnCancel" StartIcon="@Icons.Material.Filled.Clear" Variant="Variant.Filled">Cancel</MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
</EditForm>

@code {
    [Parameter] 
    public LinkResponse Link { get; set; } = null!;
    
    [Parameter]
    public EventCallback OnSave { get; set; }
    
    [Parameter]
    public EventCallback OnCancel { get; set; }

    private UpdateLinkRequest Model { get; set; } = new();

    protected override void OnInitialized()
    {
        Model = new UpdateLinkRequest
        {
            Url = Link.Url,
            Title = Link.Title,
            Description = Link.Description,
            Tags = Link.Tags
        };
    }

    private async Task SubmitAsync()
    {
        var result = await LinkService.UpdateAsync(Link.Id, Model);
        if (result.Succeeded)
        {
            Snackbar.Add("Link updated successfully.", Severity.Success);
            await OnSave.InvokeAsync();
        }
        else
        {
            foreach (var message in result.Messages)
            {
                Snackbar.Add(message, Severity.Error);
            }
        }
    }
}