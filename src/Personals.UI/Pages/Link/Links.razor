@page "/Links"
@using Personals.Common.Contracts.Links
@using Personals.UI.Enums
@inject ILinkService LinkService

<PageTitle>Links | Personals</PageTitle>

<MudStack Row>
    <MudStack Spacing="1">
        <MudText Typo="Typo.h5" Color="Color.Primary">Links</MudText>
        <MudText Typo="Typo.body2">Manage all links</MudText>
    </MudStack>
</MudStack>

<MudDivider Class="my-3" />

<MudTextField T="string" Value="@SearchQuery" ValueChanged="@OnSearch" DebounceInterval="300" Placeholder="Search for links"
              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
              Variant="Variant.Outlined" Margin="Margin.Dense" FullWidth />

@if (AddEditMode == LinkAddEditMode.None)
{
    <MudFab Class="fixed" Style="bottom: 2rem; right: 2rem;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@DisplayAddLinkSection" />
}

@if (_isLoading)
{
    <MudProgressLinear Indeterminate Color="Color.Primary" />
}
else
{
    if (AddEditMode == LinkAddEditMode.Add)
    {
        <AddLink OnSave="@HandleSuccessfulSave" OnCancel="@HideAddEditLinkSections"/>
        <MudDivider/>
    }
    else if (AddEditMode == LinkAddEditMode.Edit)
    {
        if (SelectedLink != null)
        {
            <EditLink Link="@SelectedLink" OnSave="@HandleSuccessfulSave" OnCancel="@HideAddEditLinkSections"/>
        }
        <MudDivider />
    }
    if (LinkResponses.Count == 0)
    {
        <MudAlert Class="border my-3" Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="@false">
            No links found.
        </MudAlert>
    }
    else
    {
        <MudStack Class="my-3" Row Justify="Justify.Center">
            <MudPagination Selected="@Page" SelectedChanged="@OnPageChange" Count="@TotalPages" ShowFirstButton ShowLastButton/>
        </MudStack>
        <LinksContent Links="@LinkResponses" PostDelete="@HandleSuccessfulSave" OnEdit="@DisplayEditLinkSection" />
    }
}

@code {
    private const int PageSize = 10;

    private List<LinkResponse> LinkResponses { get; set; } = [];
    private string SearchQuery { get; set; } = string.Empty;
    private int Page { get; set; } = 1;
    private int TotalPages { get; set; }
    private LinkAddEditMode AddEditMode { get; set; }
    private LinkResponse? SelectedLink { get; set; }

    private bool _isLoading;
    
    protected override Task OnInitializedAsync() => LoadDataAsync();

    private async Task OnPageChange(int page)
    {
        Page = page;
        await LoadDataAsync();
    }

    private async Task OnSearch(string searchQuery)
    {
        SearchQuery = searchQuery;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        _isLoading = true;
        try
        {
            var result = await LinkService.GetAllAsync(Page, PageSize, SearchQuery);
            if (result.Succeeded)
            {
                LinkResponses = result.Data;
                TotalPages = result.TotalPages;
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    Snackbar.Add(message, Severity.Error);
                }
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void DisplayAddLinkSection() => AddEditMode = LinkAddEditMode.Add;
    
    private void DisplayEditLinkSection(LinkResponse link)
    {
        AddEditMode = LinkAddEditMode.Edit;
        SelectedLink = link;
    }

    private void HideAddEditLinkSections() => AddEditMode = LinkAddEditMode.None;

    private async Task HandleSuccessfulSave()
    {
        HideAddEditLinkSections();
        await LoadDataAsync();
    }
}