@using Personals.Common.Contracts.Links
@using Personals.UI.Interop
@inject ILinkService LinkService

<MudExpansionPanels Class="border mud-border-lines-default" Elevation="0">
    @foreach (var link in Links)
    {
        <MudExpansionPanel Class="border mud-border-lines-default" Dense>
            <TitleContent>
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="me-1">
                    <MudText Typo="Typo.h6">@link.Title</MudText>
                    <MudStack Row>
                        <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Href="@link.Url" Target="_blank" />
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" OnClick="@(() => CopyLinkToClipboardAsync(link.Url))" />
                    </MudStack>
                </MudStack>
            </TitleContent>
            <ChildContent>
                @if (!string.IsNullOrWhiteSpace(link.Description))
                {
                    <MudText Class="mb-3" Typo="Typo.body1">@link.Description</MudText>
                }
                <MudStack Row Class="mb-5">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit"
                               IconColor="Color.Surface" OnClick="@(() => OnEdit.InvokeAsync(link))">
                        Edit
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                               IconColor="Color.Surface" OnClick="@(() => DeleteLinkAsync(link.Id))">
                        Delete
                    </MudButton>
                </MudStack>
            </ChildContent>
        </MudExpansionPanel>
    }
</MudExpansionPanels>

@code {
    [Parameter] public required List<LinkResponse> Links { get; set; }

    [Parameter] public EventCallback<LinkResponse> OnEdit { get; set; }
    
    [Parameter] public EventCallback PostDelete { get; set; }

    private async Task CopyLinkToClipboardAsync(string url)
    {
        try
        {
            await JsRuntime.CopyToClipboard(url);
            Snackbar.Add("Link copied to clipboard.", Severity.Success);
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to copy link to clipboard.", Severity.Error);
        }
    }

    private async Task DeleteLinkAsync(Guid id)
    {
        if (await DialogService.ShowDeleteDialog("Delete Link", "Are you sure you want to delete this Link?", yesText: "Delete", cancelText: "Cancel"))
        {
            try
            {
                var response = await LinkService.DeleteAsync(id);
                if (response.Succeeded)
                {
                    Snackbar.Add("Link deleted successfully.", Severity.Success);
                    await PostDelete.InvokeAsync();
                }
                else
                {
                    foreach (var message in response.Messages)
                    {
                        Snackbar.Add(message, Severity.Error);
                    }
                }
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
            }
        }
    }
}