@using Personals.Common.Contracts.CodeSnippets
@using Personals.UI.Interop
@inject ICodeSnippetService CodeSnippetService

<MudExpansionPanels Class="border mud-border-lines-default mb-5" Elevation="0">
    @foreach (var snippet in Snippets)
    {
        <MudExpansionPanel Class="border mud-border-lines-default" Dense @ondblclick="@(() => EditCodeSnippetAsync(snippet))">
            <TitleContent>
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="me-1">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@(snippet.Title ?? "(Untitled Snippet)")</MudText>
                        <MudChip T="string" Text="@snippet.Language.ToDescriptionString()" Size="Size.Small"
                                 Color="Color.Primary"/>
                    </MudStack>
                    <MudStack Row>
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                                       OnClick="@(() => CopySnippetToClipboardAsync(snippet.Snippet))"/>
                    </MudStack>
                </MudStack>
            </TitleContent>
            <ChildContent>
                @if (!string.IsNullOrWhiteSpace(snippet.Snippet))
                {
                    <MudPaper Class="pa-2 mb-3" Outlined Elevation="0">
                        <pre style="max-width: 100%; overflow-x: auto">
                            <code>
                                @snippet.Snippet
                            </code>
                        </pre>
                    </MudPaper>
                }
                @if (!string.IsNullOrWhiteSpace(snippet.Remarks))
                {
                    <MudText Class="mb-3" Typo="Typo.body1">@snippet.Remarks</MudText>
                }
                <MudStack Row Class="mb-5">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit"
                               IconColor="Color.Surface" OnClick="@(() => EditCodeSnippetAsync(snippet))">
                        Edit
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                               IconColor="Color.Surface" OnClick="@(() => DeleteCodeSnippetAsync(snippet.Id))">
                        Delete
                    </MudButton>
                </MudStack>
            </ChildContent>
        </MudExpansionPanel>
    }
</MudExpansionPanels>

@code {
    [Parameter] public required List<CodeSnippetResponse> Snippets { get; set; }

    [Parameter] public EventCallback OnReload { get; set; }

    private async Task CopySnippetToClipboardAsync(string snippet)
    {
        try
        {
            await JsRuntime.CopyToClipboard(snippet);
            Snackbar.Add("Snippet copied to clipboard.", Severity.Success);
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to copy snippet to clipboard.", Severity.Error);
        }
    }

    private async Task EditCodeSnippetAsync(CodeSnippetResponse snippet)
    {
        var dialogOptions = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraLarge,
            FullScreen = true,
            FullWidth = true,
            BackdropClick = false,
            CloseOnEscapeKey = true
        };
        var dialog = await DialogService.ShowAsync<UpdateCodeSnippetDialog>("Edit Code Snippet", new DialogParameters
        {
            { nameof(UpdateCodeSnippetDialog.Id), snippet.Id },
            {
                nameof(UpdateCodeSnippetDialog.Model), new UpdateCodeSnippetRequest
                {
                    Title = snippet.Title,
                    Language = snippet.Language,
                    Remarks = snippet.Remarks,
                    Snippet = snippet.Snippet
                }
            }
        }, dialogOptions);
        var result = await dialog.Result;
        if (result?.Canceled ?? false)
        {
            return;
        }

        await OnReload.InvokeAsync(snippet);
    }

    private async Task DeleteCodeSnippetAsync(Guid id)
    {
        if (await DialogService.ShowDeleteDialog("Delete Code Snippet", "Are you sure you want to delete this Code Snippet?", yesText: "Delete", cancelText: "Cancel"))
        {
            try
            {
                var response = await CodeSnippetService.DeleteAsync(id);
                if (response.Succeeded)
                {
                    Snackbar.Add("Code Snippet deleted successfully.", Severity.Success);
                    await OnReload.InvokeAsync();
                }
                else
                {
                    foreach (var message in response.Messages)
                    {
                        Snackbar.Add(message, Severity.Error);
                    }
                }
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
            }
        }
    }

}