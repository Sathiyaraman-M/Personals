@page "/code-snippets"
@using Personals.Common.Contracts.CodeSnippets
@inject ICodeSnippetService CodeSnippetService

<PageTitle>Code Snippets | Personals</PageTitle>

<MudStack Row>
    <MudStack Spacing="1">
        <MudText Typo="Typo.h5" Color="Color.Primary">Code Snippets</MudText>
        <MudText Typo="Typo.body2">Manage all code snippets</MudText>
    </MudStack>
</MudStack>

<MudDivider Class="my-3"/>

<MudTextField T="string" Value="@SearchQuery" ValueChanged="@OnSearch" DebounceInterval="300"
              Placeholder="Search for snippets"
              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
              Variant="Variant.Outlined" Margin="Margin.Dense" FullWidth/>
<MudFab Class="fixed" Style="bottom: 2rem; right: 2rem; z-index: 100;" Color="Color.Primary"
        StartIcon="@Icons.Material.Filled.Add" OnClick="@InvokeAddCodeSnippetDialogAsync"/>
@if (_isLoading)
{
    <MudProgressLinear Indeterminate Color="Color.Primary"/>
}
else
{
    if (CodeSnippetResponses.Count == 0)
    {
        <MudAlert Class="border my-3" Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center"
                  ShowCloseIcon="@false">
            No snippets found.
        </MudAlert>
    }
    else
    {
        <MudStack Class="my-3" Row Justify="Justify.Center">
            <MudPagination Selected="@Page" SelectedChanged="@OnPageChange" Count="@TotalPages" ShowFirstButton
                           ShowLastButton/>
        </MudStack>
        <CodeSnippetsContent Snippets="@CodeSnippetResponses" OnReload="@LoadDataAsync"/>
    }
}


@code {
    private const int PageSize = 10;

    private List<CodeSnippetResponse> CodeSnippetResponses { get; set; } = [];
    private string SearchQuery { get; set; } = string.Empty;
    private int Page { get; set; } = 1;
    private int TotalPages { get; set; }

    private bool _isLoading;

    protected override Task OnInitializedAsync() => LoadDataAsync();

    private async Task OnPageChange(int page)
    {
        Page = page;
        await LoadDataAsync();
    }

    private async Task OnSearch(string searchQuery)
    {
        SearchQuery = searchQuery;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        _isLoading = true;
        try
        {
            var result = await CodeSnippetService.GetAllAsync(Page, PageSize, SearchQuery);
            if (result.Succeeded)
            {
                CodeSnippetResponses = result.Data;
                TotalPages = result.TotalPages;
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    Snackbar.Add(message, Severity.Error);
                }
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task InvokeAddCodeSnippetDialogAsync()
    {
        var dialogOptions = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraLarge,
            FullScreen = true,
            FullWidth = true,
            BackdropClick = false,
            CloseOnEscapeKey = true
        };
        var dialog = await DialogService.ShowAsync<NewCodeSnippetDialog>("Edit Code Snippet", dialogOptions);
        var result = await dialog.Result;
        if (result?.Canceled ?? false)
        {
            return;
        }

        await LoadDataAsync();
    }

}