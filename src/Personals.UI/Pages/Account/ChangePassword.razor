@page "/Account/Change-Password"
@using Personals.Common.Contracts.Users
@inject IUserService UserService

<EditForm Model="@Model">
    <DataAnnotationsValidator/>
    <MudPaper Outlined Class="mb-4">
        <MudStack Row Justify="Justify.SpaceBetween" Class="pa-2">
            <MudStack Class="px-1" Spacing="0">
                <MudText Typo="Typo.h5" Color="Color.Primary">Change Password</MudText>
                <MudText>Secure your account with a new password</MudText>
            </MudStack>
            <MudStack Row AlignItems="AlignItems.Center">
                <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled"
                           OnClick="SubmitAsync">
                    Save
                </MudButton>
                <MudButton Color="Color.Default" StartIcon="@Icons.Material.Filled.Clear" Variant="Variant.Filled"
                           OnClick="ConfirmCancel">
                    Cancel
                </MudButton>
            </MudStack>
        </MudStack>
        <MudDivider DividerType="DividerType.FullWidth" Class="mb-2"/>
        <MudGrid Class="pa-2">
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="@Model.CurrentPassword"
                              For="@(() => Model.CurrentPassword)" Label="Current Password" Adornment="Adornment.End"
                              InputType="@_passwordVisibilities[nameof(Model.CurrentPassword)].InputType"
                              AdornmentIcon="@_passwordVisibilities[nameof(Model.CurrentPassword)].InputIcon"
                              OnAdornmentClick="@(() => TogglePasswordVisibility(nameof(Model.CurrentPassword)))"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="@Model.NewPassword"
                              For="@(() => Model.NewPassword)" Label="New Password" Adornment="Adornment.End"
                              InputType="@_passwordVisibilities[nameof(Model.NewPassword)].InputType"
                              AdornmentIcon="@_passwordVisibilities[nameof(Model.NewPassword)].InputIcon"
                              OnAdornmentClick="@(() => TogglePasswordVisibility(nameof(Model.NewPassword)))"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="@Model.ConfirmPassword"
                              For="@(() => Model.ConfirmPassword)" Label="Confirm New Password" Adornment="Adornment.End"
                              InputType="@_passwordVisibilities[nameof(Model.ConfirmPassword)].InputType"
                              AdornmentIcon="@_passwordVisibilities[nameof(Model.ConfirmPassword)].InputIcon"
                              OnAdornmentClick="@(() => TogglePasswordVisibility(nameof(Model.ConfirmPassword)))"/>
            </MudItem>
        </MudGrid>
    </MudPaper>
</EditForm>

@code {
    private ChangePasswordRequest Model { get; } = new();

    private readonly Dictionary<string, PasswordVisibilityMode> _passwordVisibilities = new()
    {
        { nameof(Model.CurrentPassword), new PasswordVisibilityMode() },
        { nameof(Model.NewPassword), new PasswordVisibilityMode() },
        { nameof(Model.ConfirmPassword), new PasswordVisibilityMode() }
    };

    private async Task SubmitAsync()
    {
        try
        {
            var result = await UserService.ChangeCurrentUserPasswordAsync(Model);
            if (result.Succeeded)
            {
                Snackbar.Add("Password changed successfully.", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    Snackbar.Add(message, Severity.Error);
                }
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
        }
    }

    private async Task ConfirmCancel()
    {
        if (await DialogService.ShowMessageBox("Cancel", "Are you sure you want to cancel?", yesText: "Yes", cancelText: "No") == true)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void TogglePasswordVisibility(string field)
    {
        var passwordVisibility = _passwordVisibilities[field];
        if (passwordVisibility.IsPasswordVisible)
        {
            passwordVisibility.IsPasswordVisible = false;
            passwordVisibility.InputIcon = Icons.Material.Filled.VisibilityOff;
            passwordVisibility.InputType = InputType.Password;
        }
        else
        {
            passwordVisibility.IsPasswordVisible = true;
            passwordVisibility.InputIcon = Icons.Material.Filled.Visibility;
            passwordVisibility.InputType = InputType.Text;
        }
    }

    private class PasswordVisibilityMode
    {
        public bool IsPasswordVisible { get; set; }
        public InputType InputType { get; set; } = InputType.Password;
        public string InputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
    }
}